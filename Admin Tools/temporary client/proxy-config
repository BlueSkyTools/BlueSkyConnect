#!/bin/bash

### This script replaces the "proxy-config" binary of unknown provenience but functions similar
# returns the URL and port if configured, nothing if not. Exits 255 for non response.s

usage () {
	echo 'Usage: proxy-config [-h] [-s]
	-h:	 HTTP Proxy Settings
	-s:	 HTTPS Proxy Settings'
	exit 255
}

# get proxy info from system preferences
# Detect active network service for active route
routeServiceGUID=$(printf "open\nget State:/Network/Global/IPv4\nd.show" | scutil | grep "PrimaryService" | awk '{print $3}')
routeServiceName=$(printf "open\nget Setup:/Network/Service/$routeServiceGUID\nd.show" | scutil | grep "UserDefinedName" | awk -F': ' '{print $2}')

## Arg parsing, for http or https settings
arg="$1"
case "$arg" in
	-h)
		networkSetupType='getwebproxy'
		;;
	-s)
		networkSetupType='getsecurewebproxy'
		;;
	*)
		usage
		;;
esac


# Get details on proxy settings. This can take some time so lets only ask the system once.
proxyDetails=$(networksetup -"$networkSetupType" "$routeServiceName")
# Are the proxy settings enabled?
if [[ $(echo "$proxyDetails" | grep ^'Enabled: Yes') ]]; then
	# It is enabled, lets read the data
	proxyHostName=$(echo "$proxyDetails" | grep ^'Server:' | awk -F ': ' '{print $NF}')
	proxyPort=$(echo "$proxyDetails" | grep ^'Port:' | awk -F ': ' '{print $NF}')
	# sanity check, did we get those? A blank field for port in the GUI gives us an output string of "0", which is equally bad as null
	if [[ -n $proxyHostName ]] && [[ -n $proxyPort ]] && [[ $proxyPort -ne 0 ]]; then
		echo "http://$proxyHostName:$proxyPort"
	fi
fi

exit 0
